<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title id="app-title">AI Flashcards for Kids</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #e0f2fe; /* Light blue background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 20px;
            box-sizing: border-box;
        }

        .game-section {
            display: none; /* Hidden by default, managed by JS */
        }

        .flashcard-container {
            perspective: 1000px; /* For 3D flip effect */
            width: 100%;
            max-width: 500px; /* Max width for the card */
            height: 300px; /* Fixed height for consistency */
            margin-bottom: 20px;
        }

        .flashcard {
            width: 100%;
            height: 100%;
            position: relative;
            transform-style: preserve-3d;
            transition: transform 0.6s;
            border-radius: 1.5rem; /* Rounded corners */
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.15); /* Soft shadow */
        }

        .flashcard.flipped {
            transform: rotateY(180deg);
        }

        .flashcard-face {
            position: absolute;
            width: 100%;
            height: 100%;
            backface-visibility: hidden; /* Hide the back face when not flipped */
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            text-align: center;
            border-radius: 1.5rem; /* Rounded corners */
            font-size: 1.5rem; /* Larger text for kids */
            font-weight: 600;
            color: #333;
            box-sizing: border-box;
        }

        .flashcard-front {
            background-color: #ffffff; /* White front */
            color: #1e3a8a; /* Dark blue text */
        }

        .flashcard-back {
            background-color: #60a5fa; /* Blue back */
            color: #ffffff; /* White text */
            transform: rotateY(180deg);
        }

        .button-style {
            padding: 12px 24px;
            border-radius: 9999px; /* Pill-shaped buttons */
            font-weight: 600;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .button-style:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 10px rgba(0, 0, 0, 0.15);
        }

        .button-primary {
            background-image: linear-gradient(to right, #3b82f6, #2563eb); /* Blue gradient */
            color: white;
        }

        .button-primary:active {
            background-image: linear-gradient(to right, #2563eb, #1d4ed8);
        }

        .button-secondary {
            background-color: #f3f4f6; /* Light gray */
            color: #4b5563; /* Dark gray text */
            border: 1px solid #d1d5db;
        }

        .button-secondary:hover {
            background-color: #e5e7eb;
        }

        .button-secondary:active {
            background-color: #d1d5db;
        }

        .quiz-option {
            background-color: #ffffff;
            border: 2px solid #a7d9ff; /* Light blue border */
            color: #1e3a8a;
            padding: 15px 20px;
            border-radius: 1rem;
            font-size: 1.1rem;
            text-align: left;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .quiz-option:hover {
            background-color: #e0f2fe; /* Lighter blue on hover */
            transform: translateY(-2px);
        }

        .quiz-option.correct {
            background-color: #dcfce7; /* Light green */
            border-color: #22c55e; /* Green border */
            color: #16a34a; /* Dark green text */
            font-weight: 700;
        }

        .quiz-option.incorrect {
            background-color: #fee2e2; /* Light red */
            border-color: #ef4444; /* Red border */
            color: #dc2626; /* Dark red text */
            font-weight: 700;
        }

        /* Language selector styles */
        .language-selector {
            position: absolute;
            top: 20px;
            right: 20px;
            display: flex;
            gap: 10px;
            z-index: 10;
        }
        .lang-button {
            padding: 8px 15px;
            border-radius: 0.75rem;
            font-weight: 600;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.2s ease-in-out;
        }
        .lang-button.active {
            background-color: #2563eb;
            color: white;
            border-color: #1d4ed8;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        .lang-button:not(.active) {
            background-color: #e0f2fe;
            color: #2563eb;
            border-color: #93c5fd;
        }
        .lang-button:not(.active):hover {
            background-color: #dbeafe;
            border-color: #60a5fa;
        }


        /* Responsive adjustments */
        @media (max-width: 600px) {
            .flashcard-face {
                font-size: 1.2rem;
                padding: 15px;
            }
            .flashcard {
                height: 250px;
            }
            .button-style {
                padding: 10px 20px;
                font-size: 0.9rem;
            }
            .controls {
                flex-direction: column;
                gap: 10px;
            }
            .quiz-option {
                font-size: 1rem;
                padding: 12px 15px;
            }
            .language-selector {
                top: 10px;
                right: 10px;
                gap: 5px;
            }
            .lang-button {
                padding: 6px 10px;
                font-size: 0.8rem;
            }
        }
    </style>
</head>
<body class="bg-blue-50">
    <div class="language-selector">
        <button id="lang-en" class="lang-button active">English</button>
        <button id="lang-km" class="lang-button">·ûÅ·üí·ûò·üÇ·ûö</button>
    </div>

    <div class="flex flex-col items-center justify-center min-h-screen w-full max-w-2xl mx-auto p-4">
        <h1 id="main-title" class="text-4xl md:text-5xl font-extrabold text-blue-800 mb-8 text-center drop-shadow-lg">
            ü§ñ AI Explorer Flashcards üöÄ
        </h1>

        <div id="flashcard-game-section" class="game-section block w-full flex flex-col items-center">
            <div class="flashcard-container">
                <div id="flashcard" class="flashcard">
                    <div id="flashcard-front" class="flashcard-face flashcard-front">
                        </div>
                    <div id="flashcard-back" class="flashcard-face flashcard-back">
                        </div>
                </div>
            </div>

            <div class="flex flex-col md:flex-row gap-4 w-full justify-center controls">
                <button id="prev-btn" class="button-style button-secondary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-left"><path d="m12 19-7-7 7-7"/><path d="M19 12H5"/></svg>
                    <span id="prev-btn-text">Previous</span>
                </button>
                <button id="flip-btn" class="button-style button-primary">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rotate-3d"><path d="M16.5 3.5a2.5 2.5 0 0 0-5 0c0 1.4.6 2.8 1.6 3.8l2.9 2.8c.8.8 1.3 1.8 1.4 2.9.2 1.1-.3 2.2-1.1 3.1-1.3 1.3-3.4 1.3-4.7 0a2 2 0 0 1-3.4 1.4c-.9-.9-1.3-2-1.2-3.3C6 10.4 7.7 8.7 9.4 7.7c.9-.5 1.9-.8 3-1"/><path d="M17.5 17.5a2.5 2.5 0 0 0 5 0c0-1.4-.6-2.8-1.6-3.8l-2.9-2.8c-.8-.8-1.3-1.8-1.4-2.9-.2-1.1.3-2.2 1.1-3.1 1.3-1.3 3.4-1.3 4.7 0a2 2 0 0 1 3.4-1.4c.9.9 1.3 2 1.2 3.3.1 2.3-1.6 4-3.3 5-.9.5-1.9.8-3 1"/></svg>
                    <span id="flip-btn-text">Flip Card</span>
                </button>
                <button id="next-btn" class="button-style button-primary">
                    <span id="next-btn-text">Next</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-right"><path d="M5 12h14"/><path d="m12 5 7 7-7 7"/></svg>
                </button>
            </div>

            <p id="progress-text" class="mt-6 text-lg font-medium text-gray-700">Card 1 of 10</p>
            <p id="completion-message" class="mt-4 text-xl font-bold text-green-700 hidden">You've completed all the cards! Great job!</p>

            <button id="start-quiz-btn" class="button-style button-primary mt-8 text-xl">
                <span id="start-quiz-btn-text">Are you an AI Genius? Test your knowledge! üß†</span>
            </button>
        </div>

        <div id="quiz-section" class="game-section w-full flex flex-col items-center p-4 bg-white rounded-lg shadow-xl hidden">
            <h2 id="quiz-title" class="text-3xl font-bold text-blue-700 mb-6 text-center">Quiz Time!</h2>
            <p id="quiz-question-number" class="text-lg font-medium text-gray-600 mb-4">Question 1 of X</p>
            <div class="bg-blue-50 p-6 rounded-xl w-full mb-6 shadow-inner">
                <p id="quiz-question" class="text-2xl font-semibold text-gray-800 text-center"></p>
            </div>
            <div id="quiz-options" class="grid grid-cols-1 md:grid-cols-2 gap-4 w-full">
                </div>
            <button id="next-question-btn" class="button-style button-primary mt-8 hidden">
                <span id="next-question-btn-text">Next Question</span>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-arrow-right"><path d="M5 12h14"/><path d="m12 5 7 7-7 7"/></svg>
            </button>
        </div>

        <div id="results-section" class="game-section w-full flex flex-col items-center p-6 bg-white rounded-lg shadow-xl hidden">
            <h2 id="results-title" class="text-3xl font-bold text-blue-700 mb-6 text-center">Quiz Results!</h2>
            <p class="text-2xl font-semibold text-gray-800 mb-4" id="score-text">You scored: <span id="final-score" class="text-green-600"></span> out of <span id="total-questions"></span></p>

            <div id="badge-display" class="flex flex-col items-center mt-6 mb-8">
                <img id="badge-image" src="" alt="Badge" class="w-32 h-32 mb-4 rounded-full border-4 border-yellow-400 p-2 shadow-lg hidden">
                <p id="badge-text" class="text-xl font-bold text-yellow-700 text-center"></p>
            </div>

            <div class="flex flex-col md:flex-row gap-4 w-full justify-center">
                <button id="play-again-btn" class="button-style button-primary">
                    <span id="play-again-btn-text">Play Again!</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-rotate-ccw"><path d="M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.76 2.75L3 8"/><path d="M3 3v5h5"/></svg>
                </button>
                <button id="back-to-flashcards-btn" class="button-style button-secondary">
                    <span id="back-to-flashcards-btn-text">Back to Flashcards</span>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-book-open"><path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"/><path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"/></svg>
                </button>
            </div>
        </div>
    </div>

    <script>
        // Language data
        const translations = {
            en: {
                appTitle: "Artificial Intelligence Flashcards for Kids",
                mainTitle: "ü§ñ AI Explorer Flashcards üöÄ",
                prevBtn: "Previous",
                flipBtn: "Flip Card",
                nextBtn: "Next",
                cardProgress: (current, total) => `Card ${current} of ${total}`,
                completionMessage: "You've completed all the cards! Great job!",
                startQuizBtn: "Are you an AI Genius? Test your knowledge! üß†",
                quizTitle: "Quiz Time!",
                questionProgress: (current, total) => `Question ${current} of ${total}`,
                nextQuestionBtn: "Next Question",
                resultsTitle: "Quiz Results!",
                scoreText: (score, total) => `You scored: ${score} out of ${total}`,
                badgeMaster: "AI Master! You're an AI Genius!",
                badgeExpert: "AI Expert! You know a lot about AI!",
                badgeLearner: "AI Learner! Keep practicing, you're doing great!",
                badgeBeginner: "AI Beginner! Don't worry, keep learning with the flashcards!",
                playAgainBtn: "Play Again!",
                backToFlashcardsBtn: "Back to Flashcards",
                flashcards: [
                    {
                        term: "What is AI?",
                        definition: "AI stands for Artificial Intelligence. It's like teaching computers to think and learn, just like humans do!"
                    },
                    {
                        term: "What can AI do?",
                        definition: "AI can do many things! It can help self-driving cars, recognize faces in photos, play games, and even understand what you say to it."
                    },
                    {
                        term: "How does AI learn?",
                        definition: "AI learns by looking at lots of examples. If you show it many pictures of cats, it learns what a cat looks like! This is called 'machine learning.'"
                    },
                    {
                        term: "What is a 'robot'?",
                        definition: "A robot is a machine that can do tasks, sometimes controlled by AI. Not all AI is in robots, and not all robots use AI!"
                    },
                    {
                        term: "Is AI smarter than humans?",
                        definition: "AI is very good at specific tasks, like math or finding patterns. But humans have creativity, feelings, and common sense that AI doesn't have. So, no, not smarter in every way!"
                    },
                    {
                        term: "What is a 'chatbot'?",
                        definition: "A chatbot is an AI that can talk to you using text or voice, like a helpful assistant on a website or in an app."
                    },
                    {
                        term: "What is 'voice assistant'?",
                        definition: "A voice assistant is an AI that listens to your voice commands, like Siri or Google Assistant, and helps you find information or do tasks."
                    },
                    {
                        term: "Is AI safe?",
                        definition: "Just like any powerful tool, AI needs to be used responsibly. People are working hard to make sure AI is safe and fair for everyone."
                    },
                    {
                        term: "What is 'facial recognition'?",
                        definition: "Facial recognition is when AI can identify people by looking at their faces, like unlocking your phone with your face."
                    },
                    {
                        term: "What is 'recommendation system'?",
                        definition: "A recommendation system is an AI that suggests things you might like, based on what you've seen or bought before, like movies on Netflix or products on Amazon."
                    }
                ],
                quizQuestions: [
                    {
                        question: "What does AI stand for?",
                        options: ["Artificial Intelligence", "Awesome Ideas", "Animal Instincts", "Automated Information"],
                        answer: "Artificial Intelligence"
                    },
                    {
                        question: "How does AI learn?",
                        options: ["By reading books", "By looking at many examples", "By sleeping", "By playing sports"],
                        answer: "By looking at many examples"
                    },
                    {
                        question: "Which of these is NOT something AI can typically do?",
                        options: ["Drive a car", "Understand your voice", "Feel emotions", "Play chess"],
                        answer: "Feel emotions"
                    },
                    {
                        question: "What is a 'chatbot'?",
                        options: ["A talking robot", "An AI that talks to you using text", "A type of fish", "A smart shoe"],
                        answer: "An AI that talks to you using text"
                    },
                    {
                        question: "Is AI smarter than humans in every way?",
                        options: ["Yes, always", "No, humans have creativity and feelings", "Only in sports", "Only when it's sunny"],
                        answer: "No, humans have creativity and feelings"
                    }
                ]
            },
            km: {
                appTitle: "·ûÄ·û∂·ûè·ûñ·û∂·ûÄ·üí·ûô ·ûî·ûâ·üí·ûâ·û∂·ûü·ûî·üí·ûî·ûì·û∑·ûò·üí·ûò·û∑·ûè (AI) ·ûü·ûò·üí·ûö·û∂·ûî·üã·ûÄ·ûª·ûò·û∂·ûö",
                mainTitle: "ü§ñ ·ûÄ·û∂·ûè·ûñ·û∂·ûÄ·üí·ûô AI ·ûü·ûò·üí·ûö·û∂·ûî·üã·û¢·üí·ûì·ûÄ·ûö·ûª·ûÄ·ûö·ûÄ üöÄ",
                prevBtn: "·ûò·ûª·ûì",
                flipBtn: "·ûî·ûÑ·üí·ûú·û∑·ûõ·ûÄ·û∂·ûè",
                nextBtn: "·ûî·ûì·üí·ûë·û∂·ûî·üã",
                cardProgress: (current, total) => `·ûÄ·û∂·ûè ${current} ·ûÄ·üí·ûì·ûª·ûÑ·ûÖ·üÜ·ûé·üÑ·ûò ${total}`,
                completionMessage: "·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûî·ûâ·üí·ûÖ·ûî·üã·ûÄ·û∂·ûè·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã·û†·ûæ·ûô! ·ûõ·üí·û¢·ûé·û∂·ûü·üã!",
                startQuizBtn: "·ûè·ûæ·û¢·üí·ûì·ûÄ·ûá·û∂·ûü·û∑·ûü·üí·ûü·ûñ·ûº·ûÄ·üÇ AI ·ûò·üÇ·ûì·ûë·üÅ? ·ûü·û∂·ûÄ·ûõ·üí·ûî·ûÑ·ûÖ·üÜ·ûé·üÅ·üá·ûä·ûπ·ûÑ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ! üß†",
                quizTitle: "·ûñ·üÅ·ûõ·ûí·üí·ûú·ûæ·ûè·üÅ·ûü·üí·ûè!",
                questionProgress: (current, total) => `·ûü·üÜ·ûé·ûΩ·ûö·ûë·û∏ ${current} ·ûÄ·üí·ûì·ûª·ûÑ·ûÖ·üÜ·ûé·üÑ·ûò ${total}`,
                nextQuestionBtn: "·ûü·üÜ·ûé·ûΩ·ûö·ûî·ûì·üí·ûë·û∂·ûî·üã",
                resultsTitle: "·ûõ·ûë·üí·ûí·ûï·ûõ·ûè·üÅ·ûü·üí·ûè!",
                scoreText: (score, total) => `·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûñ·û∑·ûì·üí·ûë·ûª: ${score} ·ûÄ·üí·ûì·ûª·ûÑ·ûÖ·üÜ·ûé·üÑ·ûò ${total}`,
                badgeMaster: "·ûò·üÅ AI! ·û¢·üí·ûì·ûÄ·ûá·û∂·ûü·û∑·ûü·üí·ûü·ûñ·ûº·ûÄ·üÇ AI!",
                badgeExpert: "·û¢·üí·ûì·ûÄ·ûá·üÜ·ûì·û∂·ûâ AI! ·û¢·üí·ûì·ûÄ·ûä·ûπ·ûÑ·ûÖ·üí·ûö·ûæ·ûì·û¢·üÜ·ûñ·û∏ AI!",
                badgeLearner: "·û¢·üí·ûì·ûÄ·ûü·û∑·ûÄ·üí·ûü·û∂ AI! ·ûî·ûì·üí·ûè·û¢·ûì·ûª·ûú·ûè·üí·ûè·ûì·üç ·û¢·üí·ûì·ûÄ·ûí·üí·ûú·ûæ·ûî·û∂·ûì·ûõ·üí·û¢!",
                badgeBeginner: "·û¢·üí·ûì·ûÄ·ûÖ·û∂·ûî·üã·ûï·üí·ûè·ûæ·ûò AI! ·ûÄ·ûª·üÜ·ûî·û∂·ûö·ûò·üí·ûó ·ûî·ûì·üí·ûè·ûö·üÄ·ûì·ûá·û∂·ûò·ûΩ·ûô·ûÄ·û∂·ûè·ûñ·û∂·ûÄ·üí·ûô!",
                playAgainBtn: "·ûõ·üÅ·ûÑ·ûò·üí·ûè·ûÑ·ûë·üÄ·ûè!",
                backToFlashcardsBtn: "·ûè·üí·ûö·û°·ûî·üã·ûë·üÖ·ûÄ·û∂·ûè·ûñ·û∂·ûÄ·üí·ûô",
                flashcards: [
                    {
                        term: "·ûè·ûæ AI ·ûá·û∂·û¢·üí·ûú·û∏?",
                        definition: "AI ·ûè·üÜ·ûé·û∂·ûÑ·û±·üí·ûô·ûî·ûâ·üí·ûâ·û∂·ûü·û∑·ûî·üí·ûî·ûì·û∑·ûò·üí·ûò·û∑·ûè·üî ·ûú·û∂·ûä·ûº·ûÖ·ûá·û∂·ûÄ·û∂·ûö·ûî·ûÑ·üí·ûö·üÄ·ûì·ûÄ·ûª·üÜ·ûñ·üí·ûô·ûº·ûë·üê·ûö·û±·üí·ûô·ûÇ·û∑·ûè ·ûì·û∑·ûÑ·ûö·üÄ·ûì ·ûä·ûº·ûÖ·ûò·ûì·ûª·ûü·üí·ûü·ûä·üÇ·ûö!"
                    },
                    {
                        term: "·ûè·ûæ AI ·û¢·û∂·ûÖ·ûí·üí·ûú·ûæ·û¢·üí·ûú·û∏·ûî·û∂·ûì?",
                        definition: "AI ·û¢·û∂·ûÖ·ûí·üí·ûú·ûæ·ûö·ûø·ûÑ·ûá·û∂·ûÖ·üí·ûö·ûæ·ûì! ·ûú·û∂·û¢·û∂·ûÖ·ûá·ûΩ·ûô·ûö·ûê·ûô·ûì·üí·ûè·ûî·ûæ·ûÄ·ûî·ûö·ûä·üÑ·ûô·ûÅ·üí·ûõ·ûΩ·ûì·ûØ·ûÑ ·ûü·üí·ûÇ·û∂·ûõ·üã·ûò·ûª·ûÅ·ûì·üÖ·ûÄ·üí·ûì·ûª·ûÑ·ûö·ûº·ûî·ûê·ûè ·ûõ·üÅ·ûÑ·û†·üí·ûÇ·üÅ·ûò ·ûì·û∑·ûÑ·ûü·ûº·ûò·üí·ûî·û∏·ûè·üÇ·ûô·ûõ·üã·ûñ·û∏·û¢·üí·ûú·û∏·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·ûì·û∑·ûô·û∂·ûô·ûë·üÖ·ûÄ·û∂·ûì·üã·ûú·û∂·üî"
                    },
                    {
                        term: "·ûè·ûæ AI ·ûö·üÄ·ûì·ûä·üÑ·ûô·ûö·ûî·üÄ·ûî·ûé·û∂?",
                        definition: "AI ·ûö·üÄ·ûì·ûä·üÑ·ûô·ûò·ûæ·ûõ·ûß·ûë·û∂·û†·ûö·ûé·üç·ûá·û∂·ûÖ·üí·ûö·ûæ·ûì·üî ·ûî·üí·ûö·ûü·û∑·ûì·ûî·ûæ·û¢·üí·ûì·ûÄ·ûî·ûÑ·üí·û†·û∂·ûâ·ûú·û∂·ûÖ·üí·ûö·ûæ·ûì·ûö·ûº·ûî·ûó·û∂·ûñ·ûÜ·üí·ûò·û∂ ·ûú·û∂·ûì·ûπ·ûÑ·ûö·üÄ·ûì·ûê·û∂·ûÜ·üí·ûò·û∂·ûò·ûæ·ûõ·ûë·üÖ·ûä·ûº·ûÖ·ûò·üí·ûè·üÅ·ûÖ! ·ûì·üÅ·üá·ûè·üí·ûö·ûº·ûú·ûî·û∂·ûì·ûÇ·üÅ·û†·üÖ·ûê·û∂ '·ûÄ·û∂·ûö·ûö·üÄ·ûì·ûò·üâ·û∂·ûü·üä·û∏·ûì'·üî"
                    },
                    {
                        term: "·ûè·ûæ '·ûò·ûì·ûª·ûü·üí·ûü·ûô·ûì·üí·ûè' ·ûá·û∂·û¢·üí·ûú·û∏?",
                        definition: "·ûò·ûì·ûª·ûü·üí·ûü·ûô·ûì·üí·ûè·ûÇ·û∫·ûá·û∂·ûò·üâ·û∂·ûü·üä·û∏·ûì·ûä·üÇ·ûõ·û¢·û∂·ûÖ·ûí·üí·ûú·ûæ·ûÄ·û∑·ûÖ·üí·ûÖ·ûÄ·û∂·ûö·ûî·û∂·ûì ·ûá·ûΩ·ûì·ûÄ·û∂·ûõ·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûö·ûÑ·ûä·üÑ·ûô AI·üî ·ûò·û∑·ûì·ûò·üÇ·ûì AI ·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã·ûü·üí·ûê·û∑·ûè·ûì·üÖ·ûÄ·üí·ûì·ûª·ûÑ·ûò·ûì·ûª·ûü·üí·ûü·ûô·ûì·üí·ûè·ûë·üÅ ·û†·ûæ·ûô·ûò·û∑·ûì·ûò·üÇ·ûì·ûò·ûì·ûª·ûü·üí·ûü·ûô·ûì·üí·ûè·ûë·û∂·üÜ·ûÑ·û¢·ûü·üã·ûî·üí·ûö·ûæ AI ·ûì·üÑ·üá·ûë·üÅ·üî"
                    },
                    {
                        term: "·ûè·ûæ AI ·ûÜ·üí·ûõ·û∂·ûè·ûá·û∂·ûÑ·ûò·ûì·ûª·ûü·üí·ûü·ûë·üÅ?",
                        definition: "AI ·ûñ·ûº·ûÄ·üÇ·ûÅ·û∂·ûÑ·ûÄ·û∑·ûÖ·üí·ûÖ·ûÄ·û∂·ûö·ûá·û∂·ûÄ·üã·ûõ·û∂·ûÄ·üã·ûé·û∂·ûü·üã ·ûä·ûº·ûÖ·ûá·û∂·ûÇ·ûé·û∑·ûè·ûú·û∑·ûë·üí·ûô·û∂ ·û¨·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûÇ·üÜ·ûö·ûº·üî ·ûî·üâ·ûª·ûì·üí·ûè·üÇ·ûò·ûì·ûª·ûü·üí·ûü·ûò·û∂·ûì·ûó·û∂·ûñ·ûÖ·üí·ûì·üÉ·ûî·üí·ûö·ûå·û∑·ûè ·û¢·û∂·ûö·ûò·üí·ûò·ûé·üç ·ûì·û∑·ûÑ·ûü·ûª·ûó·ûú·û∑·ûì·û∑·ûÖ·üí·ûÜ·üê·ûô·ûä·üÇ·ûõ AI ·ûò·û∑·ûì·ûò·û∂·ûì·üî ·ûä·ûº·ûÖ·üí·ûì·üÅ·üá ·ûë·üÅ ·ûò·û∑·ûì·ûÜ·üí·ûõ·û∂·ûè·ûá·û∂·ûÑ·ûÇ·üí·ûö·ûî·üã·ûë·û∑·ûü·ûä·üÖ·ûì·üÑ·üá·ûë·üÅ!"
                    },
                    {
                        term: "·ûè·ûæ '·ûÜ·û∂·ûè·ûî·ûº·ûè (Chatbot)' ·ûá·û∂·û¢·üí·ûú·û∏?",
                        definition: "·ûÜ·û∂·ûè·ûî·ûº·ûè (Chatbot) ·ûÇ·û∫·ûá·û∂ AI ·ûä·üÇ·ûõ·û¢·û∂·ûÖ·ûì·û∑·ûô·û∂·ûô·ûá·û∂·ûò·ûΩ·ûô·û¢·üí·ûì·ûÄ·ûä·üÑ·ûô·ûî·üí·ûö·ûæ·û¢·ûè·üí·ûê·ûî·ûë ·û¨·ûü·üÜ·û°·üÅ·ûÑ ·ûä·ûº·ûÖ·ûá·û∂·ûá·üÜ·ûì·ûΩ·ûô·ûÄ·û∂·ûö·ûä·üÇ·ûõ·ûò·û∂·ûì·ûî·üí·ûö·ûô·üÑ·ûá·ûì·üç·ûì·üÖ·ûõ·ûæ·ûÇ·üÅ·û†·ûë·üÜ·ûñ·üê·ûö ·û¨·ûì·üÖ·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·ûò·üí·ûò·ûú·û∑·ûí·û∏·üî"
                    },
                    {
                        term: "·ûè·ûæ '·ûá·üÜ·ûì·ûΩ·ûô·ûÄ·û∂·ûö·ûü·üÜ·û°·üÅ·ûÑ' ·ûá·û∂·û¢·üí·ûú·û∏?",
                        definition: "·ûá·üÜ·ûì·ûΩ·ûô·ûÄ·û∂·ûö·ûü·üÜ·û°·üÅ·ûÑ·ûÇ·û∫·ûá·û∂ AI ·ûä·üÇ·ûõ·ûü·üí·ûè·û∂·ûî·üã·ûñ·û∂·ûÄ·üí·ûô·ûî·ûâ·üí·ûá·û∂·ûü·üÜ·û°·üÅ·ûÑ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ ·ûä·ûº·ûÖ·ûá·û∂ Siri ·û¨ Google Assistant ·û†·ûæ·ûô·ûá·ûΩ·ûô·û¢·üí·ûì·ûÄ·ûü·üí·ûú·üÇ·ûÑ·ûö·ûÄ·ûñ·üê·ûè·üå·ûò·û∂·ûì ·û¨·ûí·üí·ûú·ûæ·ûÄ·û∑·ûÖ·üí·ûÖ·ûÄ·û∂·ûö·üî"
                    },
                    {
                        term: "·ûè·ûæ AI ·ûò·û∂·ûì·ûü·ûª·ûú·ûè·üí·ûê·û∑·ûó·û∂·ûñ·ûë·üÅ?",
                        definition: "·ûä·ûº·ûÖ·ûß·ûî·ûÄ·ûö·ûé·üç·ûä·üè·ûò·û∂·ûì·û¢·û∂·ûì·ûª·ûó·û∂·ûñ·ûé·û∂·ûò·ûΩ·ûô·ûä·üÇ·ûö AI ·ûè·üí·ûö·ûº·ûú·ûè·üÇ·ûî·üí·ûö·ûæ·ûî·üí·ûö·û∂·ûü·üã·ûä·üÑ·ûô·ûÄ·û∂·ûö·ûë·ûë·ûΩ·ûõ·ûÅ·ûª·ûü·ûè·üí·ûö·ûº·ûú·üî ·ûò·ûì·ûª·ûü·üí·ûü·ûÄ·üÜ·ûñ·ûª·ûÑ·ûÅ·û∑·ûè·ûÅ·üÜ·ûî·üí·ûö·ûπ·ûÑ·ûî·üí·ûö·üÇ·ûÑ·ûä·ûæ·ûò·üí·ûî·û∏·ûí·û∂·ûì·û∂·ûê·û∂ AI ·ûò·û∂·ûì·ûü·ûª·ûú·ûè·üí·ûê·û∑·ûó·û∂·ûñ ·ûì·û∑·ûÑ·ûô·ûª·ûè·üí·ûè·û∑·ûí·ûò·üå·ûü·ûò·üí·ûö·û∂·ûî·üã·ûò·ûì·ûª·ûü·üí·ûü·ûÇ·üí·ûö·ûî·üã·ûÇ·üí·ûì·û∂·üî"
                    },
                    {
                        term: "·ûè·ûæ '·ûÄ·û∂·ûö·ûü·ûò·üí·ûÇ·û∂·ûõ·üã·ûò·ûª·ûÅ' (facial recognition) ·ûá·û∂·û¢·üí·ûú·û∏?",
                        definition: "·ûÄ·û∂·ûö·ûü·ûò·üí·ûÇ·û∂·ûõ·üã·ûò·ûª·ûÅ·ûÇ·û∫·ûì·üÖ·ûñ·üÅ·ûõ·ûä·üÇ·ûõ AI ·û¢·û∂·ûÖ·ûÄ·üÜ·ûé·ûè·üã·û¢·ûè·üí·ûè·ûü·ûâ·üí·ûâ·û∂·ûé·ûò·ûì·ûª·ûü·üí·ûü·ûä·üÑ·ûô·ûò·ûæ·ûõ·ûò·ûª·ûÅ·ûö·ûî·ûü·üã·ûñ·ûΩ·ûÄ·ûÇ·üÅ ·ûä·ûº·ûÖ·ûá·û∂·ûÄ·û∂·ûö·ûä·üÑ·üá·ûü·üÑ·ûë·ûº·ûö·ûü·üê·ûñ·üí·ûë·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ·ûä·üÑ·ûô·ûî·üí·ûö·ûæ·ûò·ûª·ûÅ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ·üî"
                    },
                    {
                        term: "·ûè·ûæ '·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí·ûé·üÇ·ûì·û∂·üÜ' ·ûá·û∂·û¢·üí·ûú·û∏?",
                        definition: "·ûî·üí·ûö·ûñ·üê·ûì·üí·ûí·ûé·üÇ·ûì·û∂·üÜ·ûÇ·û∫·ûá·û∂ AI ·ûä·üÇ·ûõ·ûé·üÇ·ûì·û∂·üÜ·ûö·ûî·ûü·üã·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·ûî·üí·ûö·û†·üÇ·ûõ·ûá·û∂·ûÖ·ûº·ûõ·ûÖ·û∑·ûè·üí·ûè ·ûä·üÑ·ûô·ûï·üí·û¢·üÇ·ûÄ·ûõ·ûæ·û¢·üí·ûú·û∏·ûä·üÇ·ûõ·û¢·üí·ûì·ûÄ·ûî·û∂·ûì·ûò·ûæ·ûõ ·û¨·ûë·û∑·ûâ·ûñ·û∏·ûò·ûª·ûì ·ûä·ûº·ûÖ·ûá·û∂·ûó·û∂·ûñ·ûô·ûì·üí·ûè·ûì·üÖ·ûõ·ûæ Netflix ·û¨·ûï·ûõ·û∑·ûè·ûï·ûõ·ûì·üÖ·ûõ·ûæ Amazon·üî"
                    }
                ],
                quizQuestions: [
                    {
                        question: "·ûè·ûæ AI ·ûè·üÜ·ûé·û∂·ûÑ·û±·üí·ûô·û¢·üí·ûú·û∏?",
                        options: ["·ûî·ûâ·üí·ûâ·û∂·ûü·û∑·ûî·üí·ûî·ûì·û∑·ûò·üí·ûò·û∑·ûè", "·ûÇ·üÜ·ûì·û∑·ûè·ûä·üè·û¢·ûü·üí·ûÖ·û∂·ûö·üí·ûô", "·ûü·ûó·û∂·ûú·ûÇ·ûè·û∑·ûü·ûè·üí·ûú", "·ûñ·üê·ûè·üå·ûò·û∂·ûì·ûü·üí·ûú·üê·ûô·ûî·üí·ûö·ûú·ûè·üí·ûè·û∑"],
                        answer: "·ûî·ûâ·üí·ûâ·û∂·ûü·û∑·ûî·üí·ûî·ûì·û∑·ûò·üí·ûò·û∑·ûè"
                    },
                    {
                        question: "·ûè·ûæ AI ·ûö·üÄ·ûì·ûä·üÑ·ûô·ûö·ûî·üÄ·ûî·ûé·û∂?",
                        options: ["·ûä·üÑ·ûô·ûÄ·û∂·ûö·û¢·û∂·ûì·ûü·üÄ·ûú·ûó·üÖ", "·ûä·üÑ·ûô·ûÄ·û∂·ûö·ûò·ûæ·ûõ·ûß·ûë·û∂·û†·ûö·ûé·üç·ûá·û∂·ûÖ·üí·ûö·ûæ·ûì", "·ûä·üÑ·ûô·ûÄ·û∂·ûö·ûÇ·üÅ·ûÑ", "·ûä·üÑ·ûô·ûÄ·û∂·ûö·ûõ·üÅ·ûÑ·ûÄ·û∏·û°·û∂"],
                        answer: "·ûä·üÑ·ûô·ûÄ·û∂·ûö·ûò·ûæ·ûõ·ûß·ûë·û∂·û†·ûö·ûé·üç·ûá·û∂·ûÖ·üí·ûö·ûæ·ûì"
                    },
                    {
                        question: "·ûè·ûæ·ûò·ûΩ·ûô·ûé·û∂·ûÅ·û∂·ûÑ·ûÄ·üí·ûö·üÑ·ûò·ûì·üÅ·üá·ûò·û∑·ûì·ûò·üÇ·ûì·ûá·û∂·û¢·üí·ûú·û∏·ûä·üÇ·ûõ AI ·û¢·û∂·ûÖ·ûí·üí·ûú·ûæ·ûî·û∂·ûì·ûá·û∂·ûë·ûº·ûë·üÖ?",
                        options: ["·ûî·ûæ·ûÄ·ûî·ûö·ûö·ûê·ûô·ûì·üí·ûè", "·ûô·ûõ·üã·ûñ·û∏·ûü·üÜ·û°·üÅ·ûÑ·ûö·ûî·ûü·üã·û¢·üí·ûì·ûÄ", "·ûò·û∂·ûì·û¢·û∂·ûö·ûò·üí·ûò·ûé·üç", "·ûõ·üÅ·ûÑ·û¢·ûª·ûÄ"],
                        answer: "·ûò·û∂·ûì·û¢·û∂·ûö·ûò·üí·ûò·ûé·üç"
                    },
                    {
                        question: "·ûè·ûæ '·ûÜ·û∂·ûè·ûî·ûº·ûè' ·ûá·û∂·û¢·üí·ûú·û∏?",
                        options: ["·ûò·ûì·ûª·ûü·üí·ûü·ûô·ûì·üí·ûè·ûì·û∑·ûô·û∂·ûô", "AI ·ûä·üÇ·ûõ·ûì·û∑·ûô·û∂·ûô·ûá·û∂·ûò·ûΩ·ûô·û¢·üí·ûì·ûÄ·ûä·üÑ·ûô·ûî·üí·ûö·ûæ·û¢·ûè·üí·ûê·ûî·ûë", "·ûî·üí·ûö·ûó·üÅ·ûë·ûè·üí·ûö·û∏", "·ûü·üí·ûî·üÇ·ûÄ·ûá·ûæ·ûÑ·ûÜ·üí·ûõ·û∂·ûè·ûú·üÉ"],
                        answer: "AI ·ûä·üÇ·ûõ·ûì·û∑·ûô·û∂·ûô·ûá·û∂·ûò·ûΩ·ûô·û¢·üí·ûì·ûÄ·ûä·üÑ·ûô·ûî·üí·ûö·ûæ·û¢·ûè·üí·ûê·ûî·ûë"
                    },
                    {
                        question: "·ûè·ûæ AI ·ûÜ·üí·ûõ·û∂·ûè·ûá·û∂·ûÑ·ûò·ûì·ûª·ûü·üí·ûü·ûÇ·üí·ûö·ûî·üã·ûë·û∑·ûü·ûä·üÖ·ûò·üÇ·ûì·ûë·üÅ?",
                        options: ["·ûî·û∂·ûë/·ûÖ·û∂·ûü ·ûá·û∂·ûì·û∑·ûÖ·üí·ûÖ·ûÄ·û∂·ûõ", "·ûë·üÅ ·ûò·ûì·ûª·ûü·üí·ûü·ûò·û∂·ûì·ûó·û∂·ûñ·ûÖ·üí·ûì·üÉ·ûî·üí·ûö·ûå·û∑·ûè ·ûì·û∑·ûÑ·û¢·û∂·ûö·ûò·üí·ûò·ûé·üç", "·ûè·üÇ·ûÄ·üí·ûì·ûª·ûÑ·ûÄ·û∂·ûö·ûõ·üÅ·ûÑ·ûÄ·û∏·û°·û∂", "·ûè·üÇ·ûñ·üÅ·ûõ·ûò·û∂·ûì·ûñ·ûì·üí·ûõ·û∫·ûê·üí·ûÑ·üÉ"],
                        answer: "·ûë·üÅ ·ûò·ûì·ûª·ûü·üí·ûü·ûò·û∂·ûì·ûó·û∂·ûñ·ûÖ·üí·ûì·üÉ·ûî·üí·ûö·ûå·û∑·ûè ·ûì·û∑·ûÑ·û¢·û∂·ûö·ûò·üí·ûò·ûé·üç"
                    }
                ]
            }
        };

        // Get DOM elements for flashcards
        const appTitle = document.getElementById('app-title');
        const mainTitle = document.getElementById('main-title');
        const flashcardGameSection = document.getElementById('flashcard-game-section');
        const flashcardElement = document.getElementById('flashcard');
        const flashcardFront = document.getElementById('flashcard-front');
        const flashcardBack = document.getElementById('flashcard-back');
        const flipBtn = document.getElementById('flip-btn');
        const prevBtn = document.getElementById('prev-btn');
        const nextBtn = document.getElementById('next-btn');
        const progressText = document.getElementById('progress-text');
        const completionMessage = document.getElementById('completion-message');
        const startQuizBtn = document.getElementById('start-quiz-btn');

        // Get DOM elements for quiz
        const quizSection = document.getElementById('quiz-section');
        const quizTitle = document.getElementById('quiz-title');
        const quizQuestionNumber = document.getElementById('quiz-question-number');
        const quizQuestion = document.getElementById('quiz-question');
        const quizOptions = document.getElementById('quiz-options');
        const nextQuestionBtn = document.getElementById('next-question-btn');

        // Get DOM elements for results
        const resultsSection = document.getElementById('results-section');
        const resultsTitle = document.getElementById('results-title');
        const scoreTextElement = document.getElementById('score-text'); // Renamed to avoid conflict with score variable
        const finalScoreText = document.getElementById('final-score');
        const totalQuestionsText = document.getElementById('total-questions');
        const badgeDisplay = document.getElementById('badge-display');
        const badgeImage = document.getElementById('badge-image');
        const badgeText = document.getElementById('badge-text');
        const playAgainBtn = document.getElementById('play-again-btn');
        const backToFlashcardsBtn = document.getElementById('back-to-flashcards-btn');

        // Language buttons
        const langEnBtn = document.getElementById('lang-en');
        const langKmBtn = document.getElementById('lang-km');

        // Game state variables
        let currentLanguage = 'en'; // Default language
        let currentCardIndex = 0;
        let isFlipped = false;
        let currentQuizIndex = 0;
        let score = 0;

        /**
         * Sets the current language and updates all UI text.
         * @param {string} lang - The language code ('en' or 'km').
         */
        function setLanguage(lang) {
            currentLanguage = lang;
            const t = translations[currentLanguage];

            // Update button active states
            langEnBtn.classList.toggle('active', lang === 'en');
            langKmBtn.classList.toggle('active', lang === 'km');

            // Update static texts
            appTitle.textContent = t.appTitle;
            mainTitle.textContent = t.mainTitle;
            document.getElementById('prev-btn-text').textContent = t.prevBtn;
            document.getElementById('flip-btn-text').textContent = t.flipBtn;
            document.getElementById('next-btn-text').textContent = t.nextBtn;
            completionMessage.textContent = t.completionMessage;
            document.getElementById('start-quiz-btn-text').textContent = t.startQuizBtn;
            quizTitle.textContent = t.quizTitle;
            document.getElementById('next-question-btn-text').textContent = t.nextQuestionBtn;
            resultsTitle.textContent = t.resultsTitle;
            document.getElementById('play-again-btn-text').textContent = t.playAgainBtn;
            document.getElementById('back-to-flashcards-btn-text').textContent = t.backToFlashcardsBtn;

            // Update dynamic content
            updateCardContent();
            if (!quizSection.classList.contains('hidden')) { // If quiz is active, re-display current question
                displayQuestion();
            }
            if (!resultsSection.classList.contains('hidden')) { // If results are active, re-display results
                showResults();
            }
        }

        /**
         * Shows a specific game section and hides others.
         * @param {HTMLElement} sectionToShow - The section to make visible.
         */
        function showSection(sectionToShow) {
            flashcardGameSection.classList.add('hidden');
            quizSection.classList.add('hidden');
            resultsSection.classList.add('hidden');
            sectionToShow.classList.remove('hidden');
        }

        /**
         * Updates the content of the flashcard based on the current index and flip state.
         */
        function updateCardContent() {
            const t = translations[currentLanguage];
            const currentCard = t.flashcards[currentCardIndex];
            flashcardFront.textContent = currentCard.term;
            flashcardBack.textContent = currentCard.definition;

            // Reset flip state when changing cards
            if (isFlipped) {
                flashcardElement.classList.remove('flipped');
                isFlipped = false;
            }

            // Update progress text
            progressText.textContent = t.cardProgress(currentCardIndex + 1, t.flashcards.length);

            // Hide completion message if not on the last card
            completionMessage.classList.add('hidden');
        }

        /**
         * Toggles the flip state of the flashcard.
         */
        function flipCard() {
            flashcardElement.classList.toggle('flipped');
            isFlipped = !isFlipped;
        }

        /**
         * Navigates to the next flashcard.
         * If at the last card, it shows a completion message and loops back to the start.
         */
        function showNextCard() {
            const t = translations[currentLanguage];
            if (currentCardIndex < t.flashcards.length - 1) {
                currentCardIndex++;
            } else {
                // If it's the last card, show completion message and loop back to the start
                completionMessage.classList.remove('hidden');
                currentCardIndex = 0; // Loop back to the first card
            }
            updateCardContent();
        }

        /**
         * Navigates to the previous flashcard.
         * Loops to the last card if currently at the first card.
         */
        function showPrevCard() {
            const t = translations[currentLanguage];
            if (currentCardIndex > 0) {
                currentCardIndex--;
            } else {
                currentCardIndex = t.flashcards.length - 1; // Loop to the last card
            }
            updateCardContent();
        }

        /**
         * Starts the quiz.
         */
        function startQuiz() {
            currentQuizIndex = 0;
            score = 0;
            showSection(quizSection);
            displayQuestion();
        }

        /**
         * Displays the current quiz question and its options.
         */
        function displayQuestion() {
            const t = translations[currentLanguage];
            nextQuestionBtn.classList.add('hidden'); // Hide next button until an answer is selected
            quizOptions.innerHTML = ''; // Clear previous options

            if (currentQuizIndex < t.quizQuestions.length) {
                const q = t.quizQuestions[currentQuizIndex];
                quizQuestionNumber.textContent = t.questionProgress(currentQuizIndex + 1, t.quizQuestions.length);
                quizQuestion.textContent = q.question;

                q.options.forEach(option => {
                    const button = document.createElement('button');
                    button.textContent = option;
                    button.classList.add('quiz-option', 'w-full', 'block', 'text-left');
                    button.onclick = () => selectAnswer(option, q.answer, button);
                    quizOptions.appendChild(button);
                });
            } else {
                showResults();
            }
        }

        /**
         * Handles the user's answer selection.
         * @param {string} selectedOption - The option chosen by the user.
         * @param {string} correctAnswer - The correct answer for the current question.
         * @param {HTMLElement} clickedButton - The button element that was clicked.
         */
        function selectAnswer(selectedOption, correctAnswer, clickedButton) {
            // Disable all options after one is selected
            Array.from(quizOptions.children).forEach(button => {
                button.disabled = true;
                if (button.textContent === correctAnswer) {
                    button.classList.add('correct'); // Highlight correct answer
                } else if (button === clickedButton) {
                    button.classList.add('incorrect'); // Highlight incorrect chosen answer
                }
            });

            if (selectedOption === correctAnswer) {
                score++;
            }
            nextQuestionBtn.classList.remove('hidden'); // Show next button
        }

        /**
         * Moves to the next quiz question or shows results if quiz is finished.
         */
        function nextQuestion() {
            currentQuizIndex++;
            displayQuestion();
        }

        /**
         * Displays the quiz results and awards a badge.
         */
        function showResults() {
            const t = translations[currentLanguage];
            showSection(resultsSection);
            finalScoreText.textContent = score;
            totalQuestionsText.textContent = t.quizQuestions.length;
            scoreTextElement.innerHTML = t.scoreText(score, t.quizQuestions.length);

            let badgeSrc = '';
            let badgeMessage = '';
            const percentage = (score / t.quizQuestions.length) * 100;

            if (percentage === 100) {
                badgeSrc = 'https://placehold.co/128x128/FFD700/000000?text=AI+MASTER'; // Gold
                badgeMessage = t.badgeMaster;
            } else if (percentage >= 70) {
                badgeSrc = 'https://placehold.co/128x128/C0C0C0/000000?text=AI+EXPERT'; // Silver
                badgeMessage = t.badgeExpert;
            } else if (percentage >= 40) {
                badgeSrc = 'https://placehold.co/128x128/CD7F32/000000?text=AI+LEARNER'; // Bronze
                badgeMessage = t.badgeLearner;
            } else {
                badgeSrc = 'https://placehold.co/128x128/A9A9A9/000000?text=AI+BEGINNER'; // Grey
                badgeMessage = t.badgeBeginner;
            }

            badgeImage.src = badgeSrc;
            badgeImage.classList.remove('hidden');
            badgeText.textContent = badgeMessage;
        }

        /**
         * Resets the game to the initial flashcard view.
         */
        function resetGame() {
            currentCardIndex = 0;
            isFlipped = false;
            currentQuizIndex = 0;
            score = 0;
            completionMessage.classList.add('hidden');
            badgeImage.classList.add('hidden'); // Hide badge image
            showSection(flashcardGameSection);
            updateCardContent();
        }

        // Add event listeners
        flipBtn.addEventListener('click', flipCard);
        nextBtn.addEventListener('click', showNextCard);
        prevBtn.addEventListener('click', showPrevCard);
        startQuizBtn.addEventListener('click', startQuiz);
        nextQuestionBtn.addEventListener('click', nextQuestion);
        playAgainBtn.addEventListener('click', resetGame);
        backToFlashcardsBtn.addEventListener('click', resetGame);

        // Language button event listeners
        langEnBtn.addEventListener('click', () => setLanguage('en'));
        langKmBtn.addEventListener('click', () => setLanguage('km'));

        // Initialize the game when the window loads
        window.onload = function() {
            setLanguage('en'); // Set default language to English on load
            resetGame(); // Start with flashcards
        };
    </script>
</body>
</html>
